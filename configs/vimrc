set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" iA Writer vim colorscheme
" Plugin 'https://github.com/jacekd/vim-iawriter'

" let Vundle manage Vundle
" required! 
Plugin 'gmarik/vundle'

" Simulating a vaguely WriteRoom-like environment in Vim. 
Plugin 'https://github.com/mikewest/vimroom'

" vim syntax for LESS (dynamic CSS)
Plugin 'groenewege/vim-less'

" Vim syntax highlighting for GCSS
Plugin 'yosssi/vim-gcss'

" vim plugin which formated javascript files by js-beautify
Plugin 'maksimr/vim-jsbeautify'

" Beautifier for javascript
Plugin 'einars/js-beautify'

" Vim syntax highlighting for Go templates.
Plugin 'cespare/vim-go-templates'

" filetype detection and syntax highlightnig for JSON in Vim
Plugin 'helino/vim-json'

" javascript syntax
Plugin 'jelera/vim-javascript-syntax'

" Vastly improved Javascript indentation and syntax support in Vim.
Plugin 'pangloss/vim-javascript'

"EditorConfig plugin for Vim http://editorconfig.org
Plugin 'editorconfig/editorconfig-vim'

" A Vim plugin for visually displaying indent levels in code
" Plugin 'nathanaelkane/vim-indent-guides'
" hi IndentGuidesOdd  ctermbg=black
" hi indentguideseven ctermbg=darkgrey
" let g:indent_guides_start_level = 2
" let g:indent_guides_guide_size = 1

" Vim plugin, provides insert mode auto-completion for quotes, parens,
"brackets, etc.
Plugin 'Raimondi/delimitMate'

" sublime text like control p
Plugin 'kien/ctrlp.vim'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|venv\|build\|deploy’'

" git diff marks in gutter
Plugin 'airblade/vim-gitgutter'

" syntax highlighting"
Plugin 'othree/javascript-libraries-syntax.vim'

" Vim Markdown runtime files
Plugin 'tpope/vim-markdown'

" surround.vim: quoting/parenthesizing made simple
Plugin 'tpope/vim-surround'

" commentary.vim: comment stuff out
Plugin 'tpope/vim-commentary'
autocmd FileType python set commentstring=#\ %s
autocmd FileType bash set commentstring=#\ %s
autocmd FileType vim set commentstring=\"\ %s

" capslock.vim: Software caps lock
Plugin 'tpope/vim-capslock'

" repeat.vim: enable repeating supported plugin maps with .
Plugin 'tpope/vim-repeat'

" fugitive.vim: a Git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'

"lean & mean status/tabline for vim that's light as air"
Plugin 'bling/vim-airline'
let g:airline_powerline_fonts = 1
"let g:airline_theme='powerlineish'
let g:airline_theme='zenburn'
set laststatus=2

" if !exists('g:airline_symbols')
"     let g:airline_symbols = {}
" endif
" let g:airline_symbols.space = "\ua0"

let g:bufferline_echo = 0
set noshowmode
set ttimeoutlen=25

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = ' '
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = ' '
let g:airline#extensions#tabline#right_sep = ' '

let g:airline#extensions#whitespace#enabled = 0
"let g:airline_section_z = '' " Hide bottom right hand content

" Only show the tabs if at least 3 files are open
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 3

" Remove > and < style
let g:airline_left_sep = '' 
let g:airline_right_sep = ''

" Simple tmux statusline generator with support for powerline symbols and
" airline integration"
Plugin 'edkolev/tmuxline.vim'

" Syntax Highlighting for Stylus
Plugin 'wavded/vim-stylus'

" Vim Jade template engine syntax highlighting and indention
Plugin 'digitaltoad/vim-jade'

" Vim support for Rust file detection and syntax highlighting.
" Plugin 'wting/rust.vim'

" Vim syntax for TOML
Plugin 'cespare/vim-toml'

" Syntax checking hacks for vim
Plugin 'scrooloose/syntastic'
let g:syntastic_javascript_checkers = ['jshint', 'jscs']
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol='⚠'
"let g:syntastic_auto_jump=1
" nnoremap <leader>js :w<CR>:make<CR>:cw<CR>
" This does what it says on the tin. It will check your file on open too, not
" just on save.
" " You might not want this, so just leave it out if you don't.
let g:syntastic_check_on_open=1
" http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/
"

"A tree explorer plugin for vim.
Plugin 'scrooloose/nerdtree'
let NERDTreeIgnore=['\.pyc$', '\.o$', '\~$', 'node_modules$']

"Vim local themes for powerline
Plugin 'zhaocai/linepower.vim'

"Seamless navigation between tmux panes and vim splits
Plugin 'christoomey/vim-tmux-navigator'

"Vim motions on speed!
Plugin 'Lokaltog/vim-easymotion'

" code autocompletion
" NOTE: Requires extra compilation setup
" Plugin 'Valloric/YouCompleteMe'

"Go development plugin for Vim
" Plugin 'fatih/vim-go'

"Typescript syntax files for Vim
" Plugin 'leafgarland/typescript-vim'

"True Sublime Text style multiple selections for Vim
" Plugin 'kristijanhusak/vim-multiple-cursors'

call vundle#end()
filetype on
"filetype plugin indent on

""""""" END PLUGINS

let mapleader = ","

set t_Co=256
syntax on
set background=dark

set ignorecase
syntax on
color molokai
set hlsearch

set ts=4
set expandtab
set shiftwidth=4
set autoindent
set cursorline
set number
set backspace=indent,eol,start
if $TMUX == ''
    set clipboard+=unnamed
endif

"This unsets the "last search pattern" register by hitting return
"nnoremap <esc> :noh<CR><esc>
"nnoremap <esc> :noh<return><esc>

" Allows tab to indent and switch between tabs
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
nnoremap <S-TAB> :bprev<CR>
nnoremap <TAB> :bnext<CR>

" Disable annoying lookup
noremap K <Esc>

noremap H ^
noremap L $

noremap <UP> <NOP>
noremap <DOWN> <NOP>
noremap <LEFT> <NOP>
noremap <RIGHT> <NOP>

imap jk <Esc>

map <leader>b :NERDTreeToggle<CR>
map <leader>n :set number!<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

noremap <c-s> :w<CR>
imap <c-s> <Esc>:w<CR>a
imap <c-s> <Esc><c-s>

map <leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>h <Plug>(easymotion-linebackward)

nnoremap <space> <C-d>
nnoremap <S-space> <C-u>

" Use <leader>p to toggle between 'paste' and 'nopaste'
nmap <leader>p :set paste!<CR>

let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

map / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)

" Markdown preview
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr> :redraw!<cr>

nnoremap gb <C-o>

" turn-on distraction free writing mode for markdown files
au BufNewFile,BufRead *.{txt,md,mdown,mkd,mkdn,markdown,mdwn,apib} call DistractionFreeWriting()
function! DistractionFreeWriting()
    "colorscheme iawriter
    "set background=light
    set lines=40 columns=120           " size of the editable area
    set laststatus=0                   " don't show status line
    set noruler                        " don't show ruler
    set linebreak                      " break the lines on words
    set nonumber                       " hide line numbers
    set filetype=markdown
endfunction

map <F5> :setlocal spell! spelllang=en_us<CR>

autocmd FileType make setlocal noexpandtab
autocmd FileType Javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType gcss setlocal shiftwidth=2 tabstop=2

let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_key='<leader>c'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
